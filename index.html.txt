<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
  <title>FPS Mobile Game</title>
  <style>
    body { margin: 0; overflow: hidden; }
    canvas { display: block; }
    #menu, #gameUI, #graphicsBtn { position: absolute; top: 10px; left: 10px; background: rgba(0,0,0,0.7); color: white; padding: 10px; }
    #gameUI, #graphicsBtn { display: none; }
    #touchControls { position: fixed; bottom: 20px; width: 100%; display: none; }
    #joystick { position: absolute; left: 20px; width: 100px; height: 100px; background: rgba(255,255,255,0.3); border-radius: 50%; }
    #shootBtn { position: absolute; right: 20px; width: 80px; height: 80px; background: rgba(255,0,0,0.5); border-radius: 50%; }
  </style>
</head>
<body>
  <div id="menu">
    <h2>Select Character</h2>
    <button onclick="startGame('blue')">Blue Soldier</button>
    <button onclick="startGame('red')">Red Soldier</button>
    <h2>Select Gun</h2>
    <select id="gunSelect">
      <option value="pistol">Pistol (Fast)</option>
      <option value="rifle">Rifle (Strong)</option>
    </select>
    <br><button onclick="startGame()">Start Game</button>
  </div>
  <div id="gameUI">
    Lives: <span id="lives">3</span> | Level: <span id="level">1</span> | Enemies: <span id="enemies">0</span>
  </div>
  <button id="graphicsBtn" onclick="toggleGraphics()">Low Graphics</button>
  <div id="touchControls">
    <div id="joystick"></div>
    <div id="shootBtn"></div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/howler/2.2.3/howler.min.js"></script>
  <script>
    // Scene setup
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.set(0, 1, 0);
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    // Graphics settings
    let highGraphics = true;
    function toggleGraphics() {
      highGraphics = !highGraphics;
      renderer.setPixelRatio(highGraphics ? window.devicePixelRatio : 1);
      document.getElementById('graphicsBtn').innerText = highGraphics ? 'Low Graphics' : 'High Graphics';
    }

    // Lighting
    const ambientLight = new THREE.AmbientLight(0x404040);
    scene.add(ambientLight);
    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);
    directionalLight.position.set(1, 1, 1);
    scene.add(directionalLight);

    // Ground
    const groundGeo = new THREE.PlaneGeometry(100, 100);
    const groundMat = new THREE.MeshBasicMaterial({ color: 0x333333 });
    const ground = new THREE.Mesh(groundGeo, groundMat);
    ground.rotation.x = -Math.PI / 2;
    scene.add(ground);

    // Player
    let player = { lives: 3, character: 'blue', gun: 'pistol', lastShot: 0 };
    const playerGeo = new THREE.BoxGeometry(0.5, 1, 0.5);
    const playerMat = new THREE.MeshBasicMaterial({ color: 0x0000ff });
    const playerMesh = new THREE.Mesh(playerGeo, playerMat);
    playerMesh.position.set(0, 0.5, 0);
    scene.add(playerMesh);

    // Guns
    const guns = {
      pistol: { damage: 1, fireRate: 0.5, sound: new Howl({ src: ['https://assets.mixkit.co/sfx/preview/mixkit-short-laser-gun-shot-247.mp3'] }) },
      rifle: { damage: 2, fireRate: 1, sound: new Howl({ src: ['https://assets.mixkit.co/sfx/preview/mixkit-laser-weapon-shot-1681.mp3'] }) }
    };

    // Enemies
    let enemies = [];
    function createEnemy(isBoss = false) {
      const geo = new THREE.BoxGeometry(isBoss ? 2 : 1, isBoss ? 2 : 1, isBoss ? 2 : 1);
      const mat = new THREE.MeshBasicMaterial({ color: isBoss ? 0xff0000 : 0x00ff00 });
      const enemy = new THREE.Mesh(geo, mat);
      enemy.position.set(
        Math.random() * 40 - 20,
        isBoss ? 1 : 0.5,
        Math.random() * 40 - 20
      );
      enemy.health = isBoss ? 10 : 3;
      enemy.isBoss = isBoss;
      scene.add(enemy);
      enemies.push(enemy);
    }

    // Obstructions
    function createObstruction() {
      const geo = new THREE.BoxGeometry(2, 2, 2);
      const mat = new THREE.MeshBasicMaterial({ color: 0x666666 });
      const obs = new THREE.Mesh(geo, mat);
      obs.position.set(Math.random() * 30 - 15, 1, Math.random() * 30 - 15);
      scene.add(obs);
    }

    // Levels
    const levels = [
      { enemies: 3, obstructions: 2, boss: true },
      { enemies: 5, obstructions: 4, boss: true },
      { enemies: 7, obstructions: 6, boss: true }
    ];
    let currentLevel = 0;

    // Audio
    const bgMusic = new Howl({
      src: ['https://assets.mixkit.co/music/preview/mixkit-tech-house-vibes-130.mp3'],
      loop: true,
      volume: 0.5
    });

    function playVoiceover(text) {
      const utterance = new SpeechSynthesisUtterance(text);
      window.speechSynthesis.speak(utterance);
    }

    // Touch controls
    let moveDirection = { x: 0, z: 0 };
    const joystick = document.getElementById('joystick');
    const shootBtn = document.getElementById('shootBtn');
    joystick.addEventListener('touchstart', (e) => {
      e.preventDefault();
      const touch = e.touches[0];
      moveDirection.x = (touch.clientX - joystick.offsetLeft - 50) / 50;
      moveDirection.z = (touch.clientY - joystick.offsetTop - 50) / 50;
    });
    joystick.addEventListener('touchmove', (e) => {
      e.preventDefault();
      const touch = e.touches[0];
      moveDirection.x = (touch.clientX - joystick.offsetLeft - 50) / 50;
      moveDirection.z = (touch.clientY - joystick.offsetTop - 50) / 50;
    });
    joystick.addEventListener('touchend', () => {
      moveDirection.x = 0;
      moveDirection.z = 0;
    });
    shootBtn.addEventListener('touchstart', () => shoot());

    // Shooting
    function shoot() {
      const now = Date.now() / 1000;
      if (now - player.lastShot < guns[player.gun].fireRate) return;
      player.lastShot = now;
      guns[player.gun].sound.play();

      const raycaster = new THREE.Raycaster();
      raycaster.set(camera.position, camera.getWorldDirection(new THREE.Vector3()));
      const intersects = raycaster.intersectObjects(enemies);
      if (intersects.length > 0) {
        const enemy = intersects[0].object;
        enemy.health -= guns[player.gun].damage;
        if (enemy.health <= 0) {
          scene.remove(enemy);
          enemies = enemies.filter(e => e !== enemy);
        }
      }
    }

    // Game loop
    function animate() {
      requestAnimationFrame(animate);

      // Move player
      const speed = 0.1;
      camera.position.x += moveDirection.x * speed;
      camera.position.z += moveDirection.z * speed;
      playerMesh.position.set(camera.position.x, 0.5, camera.position.z);

      // Move enemies
      enemies.forEach(enemy => {
        const direction = new THREE.Vector3().subVectors(camera.position, enemy.position).normalize();
        enemy.position.add(direction.multiplyScalar(enemy.isBoss ? 0.05 : 0.03));
        if (enemy.position.distanceTo(camera.position) < 1) {
          player.lives--;
          document.getElementById('lives').innerText = player.lives;
          if (player.lives <= 0) {
            alert('Game Over!');
            resetGame();
          }
        }
      });

      // Check level completion
      if (enemies.length === 0 && currentLevel < levels.length) {
        currentLevel++;
        if (currentLevel < levels.length) {
          startLevel();
        } else {
          alert('You Win!');
          resetGame();
        }
      }

      renderer.render(scene, camera);
    }

    // Start level
    function startLevel() {
      document.getElementById('level').innerText = currentLevel + 1;
      playVoiceover(`Level ${currentLevel + 1} start`);
      enemies = [];
      for (let i = 0; i < levels[currentLevel].enemies; i++) createEnemy();
      if (levels[currentLevel].boss) createEnemy(true);
      for (let i = 0; i < levels[currentLevel].obstructions; i++) createObstruction();
      document.getElementById('enemies').innerText = enemies.length;
    }

    // Start game
    function startGame(character) {
      if (character) player.character = character;
      player.gun = document.getElementById('gunSelect').value;
      playerMesh.material.color.set(player.character === 'blue' ? 0x0000ff : 0xff0000);
      document.getElementById('menu').style.display = 'none';
      document.getElementById('gameUI').style.display = 'block';
      document.getElementById('graphicsBtn').style.display = 'block';
      document.getElementById('touchControls').style.display = 'block';
      bgMusic.play();
      startLevel();
      animate();
    }

    // Reset game
    function resetGame() {
      currentLevel = 0;
      player.lives = 3;
      document.getElementById('lives').innerText = player.lives;
      document.getElementById('menu').style.display = 'block';
      document.getElementById('gameUI').style.display = 'none';
      document.getElementById('graphicsBtn').style.display = 'none';
      document.getElementById('touchControls').style.display = 'none';
      enemies.forEach(enemy => scene.remove(enemy));
      enemies = [];
      bgMusic.stop();
    }

    // Handle resize
    window.addEventListener('resize', () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    });

    // Mouse look
    document.addEventListener('mousemove', (e) => {
      camera.rotation.y -= e.movementX * 0.002;
      camera.rotation.x -= e.movementY * 0.002;
      camera.rotation.x = Math.max(-Math.PI / 2, Math.min(Math.PI / 2, camera.rotation.x));
    });
  </script>
</body>
</html>